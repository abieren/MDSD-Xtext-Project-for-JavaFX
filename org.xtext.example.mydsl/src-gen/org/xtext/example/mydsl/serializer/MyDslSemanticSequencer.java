/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Button;
import org.xtext.example.mydsl.myDsl.Checkbox;
import org.xtext.example.mydsl.myDsl.Container;
import org.xtext.example.mydsl.myDsl.ContainerReference;
import org.xtext.example.mydsl.myDsl.Domainmodel;
import org.xtext.example.mydsl.myDsl.Frame;
import org.xtext.example.mydsl.myDsl.Label;
import org.xtext.example.mydsl.myDsl.LayoutHorizontal;
import org.xtext.example.mydsl.myDsl.LayoutHorizontalEntry;
import org.xtext.example.mydsl.myDsl.LayoutPosition;
import org.xtext.example.mydsl.myDsl.LayoutPositionEntry;
import org.xtext.example.mydsl.myDsl.LayoutVertical;
import org.xtext.example.mydsl.myDsl.LayoutVerticalEntry;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.PositionValue;
import org.xtext.example.mydsl.myDsl.Radiobutton;
import org.xtext.example.mydsl.myDsl.Size;
import org.xtext.example.mydsl.myDsl.Space;
import org.xtext.example.mydsl.myDsl.Text;
import org.xtext.example.mydsl.myDsl.Textfield;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.BUTTON:
				sequence_Button(context, (Button) semanticObject); 
				return; 
			case MyDslPackage.CHECKBOX:
				sequence_Checkbox(context, (Checkbox) semanticObject); 
				return; 
			case MyDslPackage.CONTAINER:
				sequence_Container(context, (Container) semanticObject); 
				return; 
			case MyDslPackage.CONTAINER_REFERENCE:
				sequence_ContainerReference(context, (ContainerReference) semanticObject); 
				return; 
			case MyDslPackage.DOMAINMODEL:
				sequence_Domainmodel(context, (Domainmodel) semanticObject); 
				return; 
			case MyDslPackage.FRAME:
				sequence_Frame(context, (Frame) semanticObject); 
				return; 
			case MyDslPackage.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case MyDslPackage.LAYOUT_HORIZONTAL:
				sequence_LayoutHorizontal(context, (LayoutHorizontal) semanticObject); 
				return; 
			case MyDslPackage.LAYOUT_HORIZONTAL_ENTRY:
				sequence_LayoutHorizontalEntry(context, (LayoutHorizontalEntry) semanticObject); 
				return; 
			case MyDslPackage.LAYOUT_POSITION:
				sequence_LayoutPosition(context, (LayoutPosition) semanticObject); 
				return; 
			case MyDslPackage.LAYOUT_POSITION_ENTRY:
				sequence_LayoutPositionEntry(context, (LayoutPositionEntry) semanticObject); 
				return; 
			case MyDslPackage.LAYOUT_VERTICAL:
				sequence_LayoutVertical(context, (LayoutVertical) semanticObject); 
				return; 
			case MyDslPackage.LAYOUT_VERTICAL_ENTRY:
				sequence_LayoutVerticalEntry(context, (LayoutVerticalEntry) semanticObject); 
				return; 
			case MyDslPackage.POSITION_VALUE:
				sequence_PositionValue(context, (PositionValue) semanticObject); 
				return; 
			case MyDslPackage.RADIOBUTTON:
				sequence_Radiobutton(context, (Radiobutton) semanticObject); 
				return; 
			case MyDslPackage.SIZE:
				sequence_Size(context, (Size) semanticObject); 
				return; 
			case MyDslPackage.SPACE:
				sequence_Space(context, (Space) semanticObject); 
				return; 
			case MyDslPackage.TEXT:
				sequence_Text(context, (Text) semanticObject); 
				return; 
			case MyDslPackage.TEXTFIELD:
				sequence_Textfield(context, (Textfield) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     GuiElement returns Button
	 *     Button returns Button
	 *
	 * Constraint:
	 *     (name=NAME size=Size? text=Text)
	 */
	protected void sequence_Button(ISerializationContext context, Button semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GuiElement returns Checkbox
	 *     Checkbox returns Checkbox
	 *
	 * Constraint:
	 *     (name=NAME size=Size? checked=CHECKED text=Text)
	 */
	protected void sequence_Checkbox(ISerializationContext context, Checkbox semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GuiElement returns ContainerReference
	 *     ContainerReference returns ContainerReference
	 *
	 * Constraint:
	 *     (referenceName=NAME name=NAME)
	 */
	protected void sequence_ContainerReference(ISerializationContext context, ContainerReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONTAINER_REFERENCE__REFERENCE_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONTAINER_REFERENCE__REFERENCE_NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONTAINER_REFERENCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONTAINER_REFERENCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getContainerReferenceAccess().getReferenceNameNAMEParserRuleCall_0_0(), semanticObject.getReferenceName());
		feeder.accept(grammarAccess.getContainerReferenceAccess().getNameNAMEParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Container
	 *     Container returns Container
	 *
	 * Constraint:
	 *     (name=NAME size=Size? layout=Layout)
	 */
	protected void sequence_Container(ISerializationContext context, Container semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Domainmodel returns Domainmodel
	 *
	 * Constraint:
	 *     (main=NAME elements+=Type*)
	 */
	protected void sequence_Domainmodel(ISerializationContext context, Domainmodel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Frame
	 *     Frame returns Frame
	 *
	 * Constraint:
	 *     (name=NAME size=Size? layout=Layout?)
	 */
	protected void sequence_Frame(ISerializationContext context, Frame semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GuiElement returns Label
	 *     Label returns Label
	 *
	 * Constraint:
	 *     (name=NAME size=Size? text=Text)
	 */
	protected void sequence_Label(ISerializationContext context, Label semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LayoutHorizontalEntry returns LayoutHorizontalEntry
	 *
	 * Constraint:
	 *     (space=Space | guielement=GuiElement)
	 */
	protected void sequence_LayoutHorizontalEntry(ISerializationContext context, LayoutHorizontalEntry semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Layout returns LayoutHorizontal
	 *     LayoutHorizontal returns LayoutHorizontal
	 *     GuiElement returns LayoutHorizontal
	 *
	 * Constraint:
	 *     entries+=LayoutHorizontalEntry+
	 */
	protected void sequence_LayoutHorizontal(ISerializationContext context, LayoutHorizontal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LayoutPositionEntry returns LayoutPositionEntry
	 *
	 * Constraint:
	 *     (position=PositionValue guielement=GuiElement)
	 */
	protected void sequence_LayoutPositionEntry(ISerializationContext context, LayoutPositionEntry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LAYOUT_POSITION_ENTRY__POSITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LAYOUT_POSITION_ENTRY__POSITION));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.LAYOUT_POSITION_ENTRY__GUIELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.LAYOUT_POSITION_ENTRY__GUIELEMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLayoutPositionEntryAccess().getPositionPositionValueParserRuleCall_1_0(), semanticObject.getPosition());
		feeder.accept(grammarAccess.getLayoutPositionEntryAccess().getGuielementGuiElementParserRuleCall_3_0(), semanticObject.getGuielement());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Layout returns LayoutPosition
	 *     LayoutPosition returns LayoutPosition
	 *     GuiElement returns LayoutPosition
	 *
	 * Constraint:
	 *     entries+=LayoutPositionEntry+
	 */
	protected void sequence_LayoutPosition(ISerializationContext context, LayoutPosition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LayoutVerticalEntry returns LayoutVerticalEntry
	 *
	 * Constraint:
	 *     (space=Space | guielement=GuiElement)
	 */
	protected void sequence_LayoutVerticalEntry(ISerializationContext context, LayoutVerticalEntry semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Layout returns LayoutVertical
	 *     LayoutVertical returns LayoutVertical
	 *     GuiElement returns LayoutVertical
	 *
	 * Constraint:
	 *     entries+=LayoutVerticalEntry+
	 */
	protected void sequence_LayoutVertical(ISerializationContext context, LayoutVertical semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PositionValue returns PositionValue
	 *
	 * Constraint:
	 *     (posX=INT posY=INT)
	 */
	protected void sequence_PositionValue(ISerializationContext context, PositionValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.POSITION_VALUE__POS_X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.POSITION_VALUE__POS_X));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.POSITION_VALUE__POS_Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.POSITION_VALUE__POS_Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPositionValueAccess().getPosXINTTerminalRuleCall_0_0(), semanticObject.getPosX());
		feeder.accept(grammarAccess.getPositionValueAccess().getPosYINTTerminalRuleCall_2_0(), semanticObject.getPosY());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GuiElement returns Radiobutton
	 *     Radiobutton returns Radiobutton
	 *
	 * Constraint:
	 *     (group=NAME name=NAME size=Size? checked=CHECKED_YES? text=Text)
	 */
	protected void sequence_Radiobutton(ISerializationContext context, Radiobutton semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Size returns Size
	 *
	 * Constraint:
	 *     (width=INT height=INT)
	 */
	protected void sequence_Size(ISerializationContext context, Size semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SIZE__WIDTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SIZE__WIDTH));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SIZE__HEIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SIZE__HEIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSizeAccess().getWidthINTTerminalRuleCall_0_0(), semanticObject.getWidth());
		feeder.accept(grammarAccess.getSizeAccess().getHeightINTTerminalRuleCall_2_0(), semanticObject.getHeight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Space returns Space
	 *
	 * Constraint:
	 *     space=INT
	 */
	protected void sequence_Space(ISerializationContext context, Space semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.SPACE__SPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.SPACE__SPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSpaceAccess().getSpaceINTTerminalRuleCall_1_0(), semanticObject.getSpace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Text returns Text
	 *
	 * Constraint:
	 *     text=STRING
	 */
	protected void sequence_Text(ISerializationContext context, Text semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TEXT__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TEXT__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextAccess().getTextSTRINGTerminalRuleCall_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     GuiElement returns Textfield
	 *     Textfield returns Textfield
	 *
	 * Constraint:
	 *     (name=NAME size=Size? text=Text)
	 */
	protected void sequence_Textfield(ISerializationContext context, Textfield semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
