/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Domainmodel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsTypeParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		////Domainmodel:
		////   (elements+=Type)*;
		//Domainmodel:
		//	elements+=Type*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Type*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Type
		public RuleCall getElementsTypeParserRuleCall_0() { return cElementsTypeParserRuleCall_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFrameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContainerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	Frame | Container;
		@Override public ParserRule getRule() { return rule; }
		
		//Frame | Container
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Frame
		public RuleCall getFrameParserRuleCall_0() { return cFrameParserRuleCall_0; }
		
		//Container
		public RuleCall getContainerParserRuleCall_1() { return cContainerParserRuleCall_1; }
	}
	public class FrameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Frame");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFrameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeSizeParserRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final Assignment cGuielementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGuielementsGuiElementParserRuleCall_4_0 = (RuleCall)cGuielementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Frame:
		//	'frame' name=ID '{'
		//	size=Size?
		//	guielements+=GuiElement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'frame' name=ID '{' size=Size? guielements+=GuiElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'frame'
		public Keyword getFrameKeyword_0() { return cFrameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//size=Size?
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }
		
		//Size
		public RuleCall getSizeSizeParserRuleCall_3_0() { return cSizeSizeParserRuleCall_3_0; }
		
		//guielements+=GuiElement*
		public Assignment getGuielementsAssignment_4() { return cGuielementsAssignment_4; }
		
		//GuiElement
		public RuleCall getGuielementsGuiElementParserRuleCall_4_0() { return cGuielementsGuiElementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Container");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContainerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContainerNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContainerNameIDTerminalRuleCall_1_0 = (RuleCall)cContainerNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeSizeParserRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final Assignment cLayoutAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLayoutLayoutParserRuleCall_4_0 = (RuleCall)cLayoutAssignment_4.eContents().get(0);
		private final Assignment cGuielementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGuielementsGuiElementParserRuleCall_5_0 = (RuleCall)cGuielementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Container:
		//	'container' containerName=ID '{'
		//	size=Size?
		//	//(position=Position)?
		//	layout=Layout?
		//	guielements+=GuiElement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'container' containerName=ID '{' size=Size? //(position=Position)?
		//layout=Layout? guielements+=GuiElement* '}'
		public Group getGroup() { return cGroup; }
		
		//'container'
		public Keyword getContainerKeyword_0() { return cContainerKeyword_0; }
		
		//containerName=ID
		public Assignment getContainerNameAssignment_1() { return cContainerNameAssignment_1; }
		
		//ID
		public RuleCall getContainerNameIDTerminalRuleCall_1_0() { return cContainerNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//size=Size?
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }
		
		//Size
		public RuleCall getSizeSizeParserRuleCall_3_0() { return cSizeSizeParserRuleCall_3_0; }
		
		////(position=Position)?
		//layout=Layout?
		public Assignment getLayoutAssignment_4() { return cLayoutAssignment_4; }
		
		//Layout
		public RuleCall getLayoutLayoutParserRuleCall_4_0() { return cLayoutLayoutParserRuleCall_4_0; }
		
		//guielements+=GuiElement*
		public Assignment getGuielementsAssignment_5() { return cGuielementsAssignment_5; }
		
		//GuiElement
		public RuleCall getGuielementsGuiElementParserRuleCall_5_0() { return cGuielementsGuiElementParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ContainerReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ContainerReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferenceNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferenceNameIDTerminalRuleCall_0_0 = (RuleCall)cReferenceNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ContainerReference:
		//	referenceName=ID name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//referenceName=ID name=ID
		public Group getGroup() { return cGroup; }
		
		//referenceName=ID
		public Assignment getReferenceNameAssignment_0() { return cReferenceNameAssignment_0; }
		
		//ID
		public RuleCall getReferenceNameIDTerminalRuleCall_0_0() { return cReferenceNameIDTerminalRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Layout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLayoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLayoutAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLayoutIDTerminalRuleCall_1_0 = (RuleCall)cLayoutAssignment_1.eContents().get(0);
		
		//Layout:
		//	'layout=' layout=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'layout=' layout=ID
		public Group getGroup() { return cGroup; }
		
		//'layout='
		public Keyword getLayoutKeyword_0() { return cLayoutKeyword_0; }
		
		//layout=ID
		public Assignment getLayoutAssignment_1() { return cLayoutAssignment_1; }
		
		//ID
		public RuleCall getLayoutIDTerminalRuleCall_1_0() { return cLayoutIDTerminalRuleCall_1_0; }
	}
	public class PositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Position");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPosXAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPosXINTTerminalRuleCall_0_0 = (RuleCall)cPosXAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPosYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPosYINTTerminalRuleCall_2_0 = (RuleCall)cPosYAssignment_2.eContents().get(0);
		
		//Position:
		//	posX=INT ',' posY=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//posX=INT ',' posY=INT
		public Group getGroup() { return cGroup; }
		
		//posX=INT
		public Assignment getPosXAssignment_0() { return cPosXAssignment_0; }
		
		//INT
		public RuleCall getPosXINTTerminalRuleCall_0_0() { return cPosXINTTerminalRuleCall_0_0; }
		
		//','
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }
		
		//posY=INT
		public Assignment getPosYAssignment_2() { return cPosYAssignment_2; }
		
		//INT
		public RuleCall getPosYINTTerminalRuleCall_2_0() { return cPosYINTTerminalRuleCall_2_0; }
	}
	public class SizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Size");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWidthAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWidthINTTerminalRuleCall_0_0 = (RuleCall)cWidthAssignment_0.eContents().get(0);
		private final Keyword cXKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHeightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHeightINTTerminalRuleCall_2_0 = (RuleCall)cHeightAssignment_2.eContents().get(0);
		
		//Size:
		//	width=INT 'x' height=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//width=INT 'x' height=INT
		public Group getGroup() { return cGroup; }
		
		//width=INT
		public Assignment getWidthAssignment_0() { return cWidthAssignment_0; }
		
		//INT
		public RuleCall getWidthINTTerminalRuleCall_0_0() { return cWidthINTTerminalRuleCall_0_0; }
		
		//'x'
		public Keyword getXKeyword_1() { return cXKeyword_1; }
		
		//height=INT
		public Assignment getHeightAssignment_2() { return cHeightAssignment_2; }
		
		//INT
		public RuleCall getHeightINTTerminalRuleCall_2_0() { return cHeightINTTerminalRuleCall_2_0; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextIDTerminalRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//Text:
		//	'text=' text=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'text=' text=ID
		public Group getGroup() { return cGroup; }
		
		//'text='
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }
		
		//text=ID
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//ID
		public RuleCall getTextIDTerminalRuleCall_1_0() { return cTextIDTerminalRuleCall_1_0; }
	}
	public class CheckboxChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CheckboxChoice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChoiceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cChoiceIDTerminalRuleCall_0_0 = (RuleCall)cChoiceAssignment_0.eContents().get(0);
		private final Keyword cXKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CheckboxChoice:
		//	choice=ID '=x'? ','?;
		@Override public ParserRule getRule() { return rule; }
		
		//choice=ID '=x'? ','?
		public Group getGroup() { return cGroup; }
		
		//choice=ID
		public Assignment getChoiceAssignment_0() { return cChoiceAssignment_0; }
		
		//ID
		public RuleCall getChoiceIDTerminalRuleCall_0_0() { return cChoiceIDTerminalRuleCall_0_0; }
		
		//'=x'?
		public Keyword getXKeyword_1() { return cXKeyword_1; }
		
		//','?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
	}
	public class GuiElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.GuiElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextfieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cButtonParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCheckboxParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cContainerReferenceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//GuiElement:
		//	Textfield | Label | Button | Checkbox | ContainerReference;
		@Override public ParserRule getRule() { return rule; }
		
		//Textfield | Label | Button | Checkbox | ContainerReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Textfield
		public RuleCall getTextfieldParserRuleCall_0() { return cTextfieldParserRuleCall_0; }
		
		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
		
		//Button
		public RuleCall getButtonParserRuleCall_2() { return cButtonParserRuleCall_2; }
		
		//Checkbox
		public RuleCall getCheckboxParserRuleCall_3() { return cCheckboxParserRuleCall_3; }
		
		//ContainerReference
		public RuleCall getContainerReferenceParserRuleCall_4() { return cContainerReferenceParserRuleCall_4; }
	}
	public class TextfieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Textfield");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextfieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeSizeParserRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextTextParserRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		
		//Textfield:
		//	'textfield' name=ID size=Size? text=Text;
		@Override public ParserRule getRule() { return rule; }
		
		//'textfield' name=ID size=Size? text=Text
		public Group getGroup() { return cGroup; }
		
		//'textfield'
		public Keyword getTextfieldKeyword_0() { return cTextfieldKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//size=Size?
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }
		
		//Size
		public RuleCall getSizeSizeParserRuleCall_2_0() { return cSizeSizeParserRuleCall_2_0; }
		
		//text=Text
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_3_0() { return cTextTextParserRuleCall_3_0; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeSizeParserRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextTextParserRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		
		//Label:
		//	'label' name=ID size=Size? text=Text;
		@Override public ParserRule getRule() { return rule; }
		
		//'label' name=ID size=Size? text=Text
		public Group getGroup() { return cGroup; }
		
		//'label'
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//size=Size?
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }
		
		//Size
		public RuleCall getSizeSizeParserRuleCall_2_0() { return cSizeSizeParserRuleCall_2_0; }
		
		//text=Text
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_3_0() { return cTextTextParserRuleCall_3_0; }
	}
	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeSizeParserRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Assignment cTextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTextTextParserRuleCall_3_0 = (RuleCall)cTextAssignment_3.eContents().get(0);
		
		//Button:
		//	'button' name=ID size=Size? text=Text;
		@Override public ParserRule getRule() { return rule; }
		
		//'button' name=ID size=Size? text=Text
		public Group getGroup() { return cGroup; }
		
		//'button'
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//size=Size?
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }
		
		//Size
		public RuleCall getSizeSizeParserRuleCall_2_0() { return cSizeSizeParserRuleCall_2_0; }
		
		//text=Text
		public Assignment getTextAssignment_3() { return cTextAssignment_3; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_3_0() { return cTextTextParserRuleCall_3_0; }
	}
	public class CheckboxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Checkbox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckboxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeSizeParserRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Assignment cChoiceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChoiceCheckboxChoiceParserRuleCall_3_0 = (RuleCall)cChoiceAssignment_3.eContents().get(0);
		
		//Checkbox:
		//	'checkbox' name=ID size=Size? choice=CheckboxChoice;
		@Override public ParserRule getRule() { return rule; }
		
		//'checkbox' name=ID size=Size? choice=CheckboxChoice
		public Group getGroup() { return cGroup; }
		
		//'checkbox'
		public Keyword getCheckboxKeyword_0() { return cCheckboxKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//size=Size?
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }
		
		//Size
		public RuleCall getSizeSizeParserRuleCall_2_0() { return cSizeSizeParserRuleCall_2_0; }
		
		//choice=CheckboxChoice
		public Assignment getChoiceAssignment_3() { return cChoiceAssignment_3; }
		
		//CheckboxChoice
		public RuleCall getChoiceCheckboxChoiceParserRuleCall_3_0() { return cChoiceCheckboxChoiceParserRuleCall_3_0; }
	}
	
	
	private final DomainmodelElements pDomainmodel;
	private final TypeElements pType;
	private final FrameElements pFrame;
	private final ContainerElements pContainer;
	private final ContainerReferenceElements pContainerReference;
	private final LayoutElements pLayout;
	private final PositionElements pPosition;
	private final SizeElements pSize;
	private final TextElements pText;
	private final CheckboxChoiceElements pCheckboxChoice;
	private final GuiElementElements pGuiElement;
	private final TextfieldElements pTextfield;
	private final LabelElements pLabel;
	private final ButtonElements pButton;
	private final CheckboxElements pCheckbox;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainmodel = new DomainmodelElements();
		this.pType = new TypeElements();
		this.pFrame = new FrameElements();
		this.pContainer = new ContainerElements();
		this.pContainerReference = new ContainerReferenceElements();
		this.pLayout = new LayoutElements();
		this.pPosition = new PositionElements();
		this.pSize = new SizeElements();
		this.pText = new TextElements();
		this.pCheckboxChoice = new CheckboxChoiceElements();
		this.pGuiElement = new GuiElementElements();
		this.pTextfield = new TextfieldElements();
		this.pLabel = new LabelElements();
		this.pButton = new ButtonElements();
		this.pCheckbox = new CheckboxElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Domainmodel:
	////   (elements+=Type)*;
	//Domainmodel:
	//	elements+=Type*;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}
	
	//Type:
	//	Frame | Container;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Frame:
	//	'frame' name=ID '{'
	//	size=Size?
	//	guielements+=GuiElement*
	//	'}';
	public FrameElements getFrameAccess() {
		return pFrame;
	}
	
	public ParserRule getFrameRule() {
		return getFrameAccess().getRule();
	}
	
	//Container:
	//	'container' containerName=ID '{'
	//	size=Size?
	//	//(position=Position)?
	//	layout=Layout?
	//	guielements+=GuiElement*
	//	'}';
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}
	
	//ContainerReference:
	//	referenceName=ID name=ID;
	public ContainerReferenceElements getContainerReferenceAccess() {
		return pContainerReference;
	}
	
	public ParserRule getContainerReferenceRule() {
		return getContainerReferenceAccess().getRule();
	}
	
	//Layout:
	//	'layout=' layout=ID;
	public LayoutElements getLayoutAccess() {
		return pLayout;
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}
	
	//Position:
	//	posX=INT ',' posY=INT;
	public PositionElements getPositionAccess() {
		return pPosition;
	}
	
	public ParserRule getPositionRule() {
		return getPositionAccess().getRule();
	}
	
	//Size:
	//	width=INT 'x' height=INT;
	public SizeElements getSizeAccess() {
		return pSize;
	}
	
	public ParserRule getSizeRule() {
		return getSizeAccess().getRule();
	}
	
	//Text:
	//	'text=' text=ID;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//CheckboxChoice:
	//	choice=ID '=x'? ','?;
	public CheckboxChoiceElements getCheckboxChoiceAccess() {
		return pCheckboxChoice;
	}
	
	public ParserRule getCheckboxChoiceRule() {
		return getCheckboxChoiceAccess().getRule();
	}
	
	//GuiElement:
	//	Textfield | Label | Button | Checkbox | ContainerReference;
	public GuiElementElements getGuiElementAccess() {
		return pGuiElement;
	}
	
	public ParserRule getGuiElementRule() {
		return getGuiElementAccess().getRule();
	}
	
	//Textfield:
	//	'textfield' name=ID size=Size? text=Text;
	public TextfieldElements getTextfieldAccess() {
		return pTextfield;
	}
	
	public ParserRule getTextfieldRule() {
		return getTextfieldAccess().getRule();
	}
	
	//Label:
	//	'label' name=ID size=Size? text=Text;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Button:
	//	'button' name=ID size=Size? text=Text;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}
	
	//Checkbox:
	//	'checkbox' name=ID size=Size? choice=CheckboxChoice;
	public CheckboxElements getCheckboxAccess() {
		return pCheckbox;
	}
	
	public ParserRule getCheckboxRule() {
		return getCheckboxAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
