/*
 * generated by Xtext 2.19.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Domainmodel";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDomainmodel
entryRuleDomainmodel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainmodelRule()); }
	iv_ruleDomainmodel=ruleDomainmodel
	{ $current=$iv_ruleDomainmodel.current; }
	EOF;

// Rule Domainmodel
ruleDomainmodel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDomainmodelAccess().getElementsTypeParserRuleCall_0());
			}
			lv_elements_0_0=ruleType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDomainmodelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.example.mydsl.MyDsl.Type");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getFrameParserRuleCall_0());
		}
		this_Frame_0=ruleFrame
		{
			$current = $this_Frame_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getContainerParserRuleCall_1());
		}
		this_Container_1=ruleContainer
		{
			$current = $this_Container_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFrame
entryRuleFrame returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFrameRule()); }
	iv_ruleFrame=ruleFrame
	{ $current=$iv_ruleFrame.current; }
	EOF;

// Rule Frame
ruleFrame returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='frame'
		{
			newLeafNode(otherlv_0, grammarAccess.getFrameAccess().getFrameKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFrameAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFrameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getFrameAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFrameAccess().getSizeSizeParserRuleCall_3_0());
				}
				lv_size_3_0=ruleSize
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFrameRule());
					}
					set(
						$current,
						"size",
						lv_size_3_0,
						"org.xtext.example.mydsl.MyDsl.Size");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFrameAccess().getGuielementsGuiElementParserRuleCall_4_0());
				}
				lv_guielements_4_0=ruleGuiElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFrameRule());
					}
					add(
						$current,
						"guielements",
						lv_guielements_4_0,
						"org.xtext.example.mydsl.MyDsl.GuiElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getFrameAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleContainer
entryRuleContainer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainerRule()); }
	iv_ruleContainer=ruleContainer
	{ $current=$iv_ruleContainer.current; }
	EOF;

// Rule Container
ruleContainer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='container'
		{
			newLeafNode(otherlv_0, grammarAccess.getContainerAccess().getContainerKeyword_0());
		}
		(
			(
				lv_containerName_1_0=RULE_ID
				{
					newLeafNode(lv_containerName_1_0, grammarAccess.getContainerAccess().getContainerNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContainerRule());
					}
					setWithLastConsumed(
						$current,
						"containerName",
						lv_containerName_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getContainerAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getContainerAccess().getSizeSizeParserRuleCall_3_0());
				}
				lv_size_3_0=ruleSize
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainerRule());
					}
					set(
						$current,
						"size",
						lv_size_3_0,
						"org.xtext.example.mydsl.MyDsl.Size");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getContainerAccess().getLayoutLayoutParserRuleCall_4_0());
				}
				lv_layout_4_0=ruleLayout
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainerRule());
					}
					set(
						$current,
						"layout",
						lv_layout_4_0,
						"org.xtext.example.mydsl.MyDsl.Layout");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getContainerAccess().getGuielementsGuiElementParserRuleCall_5_0());
				}
				lv_guielements_5_0=ruleGuiElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContainerRule());
					}
					add(
						$current,
						"guielements",
						lv_guielements_5_0,
						"org.xtext.example.mydsl.MyDsl.GuiElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getContainerAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleContainerReference
entryRuleContainerReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContainerReferenceRule()); }
	iv_ruleContainerReference=ruleContainerReference
	{ $current=$iv_ruleContainerReference.current; }
	EOF;

// Rule ContainerReference
ruleContainerReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_referenceName_0_0=RULE_ID
				{
					newLeafNode(lv_referenceName_0_0, grammarAccess.getContainerReferenceAccess().getReferenceNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContainerReferenceRule());
					}
					setWithLastConsumed(
						$current,
						"referenceName",
						lv_referenceName_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getContainerReferenceAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContainerReferenceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleLayout
entryRuleLayout returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLayoutRule()); }
	iv_ruleLayout=ruleLayout
	{ $current=$iv_ruleLayout.current; }
	EOF;

// Rule Layout
ruleLayout returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='layout='
		{
			newLeafNode(otherlv_0, grammarAccess.getLayoutAccess().getLayoutKeyword_0());
		}
		(
			(
				lv_layout_1_0=RULE_ID
				{
					newLeafNode(lv_layout_1_0, grammarAccess.getLayoutAccess().getLayoutIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLayoutRule());
					}
					setWithLastConsumed(
						$current,
						"layout",
						lv_layout_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleSize
entryRuleSize returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSizeRule()); }
	iv_ruleSize=ruleSize
	{ $current=$iv_ruleSize.current; }
	EOF;

// Rule Size
ruleSize returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_width_0_0=RULE_INT
				{
					newLeafNode(lv_width_0_0, grammarAccess.getSizeAccess().getWidthINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSizeRule());
					}
					setWithLastConsumed(
						$current,
						"width",
						lv_width_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_1='x'
		{
			newLeafNode(otherlv_1, grammarAccess.getSizeAccess().getXKeyword_1());
		}
		(
			(
				lv_height_2_0=RULE_INT
				{
					newLeafNode(lv_height_2_0, grammarAccess.getSizeAccess().getHeightINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSizeRule());
					}
					setWithLastConsumed(
						$current,
						"height",
						lv_height_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleText
entryRuleText returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextRule()); }
	iv_ruleText=ruleText
	{ $current=$iv_ruleText.current; }
	EOF;

// Rule Text
ruleText returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='text='
		{
			newLeafNode(otherlv_0, grammarAccess.getTextAccess().getTextKeyword_0());
		}
		(
			(
				lv_text_1_0=RULE_ID
				{
					newLeafNode(lv_text_1_0, grammarAccess.getTextAccess().getTextIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTextRule());
					}
					setWithLastConsumed(
						$current,
						"text",
						lv_text_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleCheckboxChoice
entryRuleCheckboxChoice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheckboxChoiceRule()); }
	iv_ruleCheckboxChoice=ruleCheckboxChoice
	{ $current=$iv_ruleCheckboxChoice.current; }
	EOF;

// Rule CheckboxChoice
ruleCheckboxChoice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_choice_0_0=RULE_ID
				{
					newLeafNode(lv_choice_0_0, grammarAccess.getCheckboxChoiceAccess().getChoiceIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCheckboxChoiceRule());
					}
					setWithLastConsumed(
						$current,
						"choice",
						lv_choice_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1='=x'
			{
				newLeafNode(otherlv_1, grammarAccess.getCheckboxChoiceAccess().getXKeyword_1());
			}
		)?
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getCheckboxChoiceAccess().getCommaKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleGuiElement
entryRuleGuiElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGuiElementRule()); }
	iv_ruleGuiElement=ruleGuiElement
	{ $current=$iv_ruleGuiElement.current; }
	EOF;

// Rule GuiElement
ruleGuiElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGuiElementAccess().getTextfieldParserRuleCall_0());
		}
		this_Textfield_0=ruleTextfield
		{
			$current = $this_Textfield_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGuiElementAccess().getLabelParserRuleCall_1());
		}
		this_Label_1=ruleLabel
		{
			$current = $this_Label_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGuiElementAccess().getButtonParserRuleCall_2());
		}
		this_Button_2=ruleButton
		{
			$current = $this_Button_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGuiElementAccess().getCheckboxParserRuleCall_3());
		}
		this_Checkbox_3=ruleCheckbox
		{
			$current = $this_Checkbox_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGuiElementAccess().getContainerReferenceParserRuleCall_4());
		}
		this_ContainerReference_4=ruleContainerReference
		{
			$current = $this_ContainerReference_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTextfield
entryRuleTextfield returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextfieldRule()); }
	iv_ruleTextfield=ruleTextfield
	{ $current=$iv_ruleTextfield.current; }
	EOF;

// Rule Textfield
ruleTextfield returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='textfield'
		{
			newLeafNode(otherlv_0, grammarAccess.getTextfieldAccess().getTextfieldKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTextfieldAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTextfieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTextfieldAccess().getSizeSizeParserRuleCall_2_0());
				}
				lv_size_2_0=ruleSize
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTextfieldRule());
					}
					set(
						$current,
						"size",
						lv_size_2_0,
						"org.xtext.example.mydsl.MyDsl.Size");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTextfieldAccess().getTextTextParserRuleCall_3_0());
				}
				lv_text_3_0=ruleText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTextfieldRule());
					}
					set(
						$current,
						"text",
						lv_text_3_0,
						"org.xtext.example.mydsl.MyDsl.Text");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	iv_ruleLabel=ruleLabel
	{ $current=$iv_ruleLabel.current; }
	EOF;

// Rule Label
ruleLabel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='label'
		{
			newLeafNode(otherlv_0, grammarAccess.getLabelAccess().getLabelKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLabelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLabelAccess().getSizeSizeParserRuleCall_2_0());
				}
				lv_size_2_0=ruleSize
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLabelRule());
					}
					set(
						$current,
						"size",
						lv_size_2_0,
						"org.xtext.example.mydsl.MyDsl.Size");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getLabelAccess().getTextTextParserRuleCall_3_0());
				}
				lv_text_3_0=ruleText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLabelRule());
					}
					set(
						$current,
						"text",
						lv_text_3_0,
						"org.xtext.example.mydsl.MyDsl.Text");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleButton
entryRuleButton returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getButtonRule()); }
	iv_ruleButton=ruleButton
	{ $current=$iv_ruleButton.current; }
	EOF;

// Rule Button
ruleButton returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='button'
		{
			newLeafNode(otherlv_0, grammarAccess.getButtonAccess().getButtonKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getButtonAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getButtonRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getButtonAccess().getSizeSizeParserRuleCall_2_0());
				}
				lv_size_2_0=ruleSize
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getButtonRule());
					}
					set(
						$current,
						"size",
						lv_size_2_0,
						"org.xtext.example.mydsl.MyDsl.Size");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getButtonAccess().getTextTextParserRuleCall_3_0());
				}
				lv_text_3_0=ruleText
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getButtonRule());
					}
					set(
						$current,
						"text",
						lv_text_3_0,
						"org.xtext.example.mydsl.MyDsl.Text");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCheckbox
entryRuleCheckbox returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheckboxRule()); }
	iv_ruleCheckbox=ruleCheckbox
	{ $current=$iv_ruleCheckbox.current; }
	EOF;

// Rule Checkbox
ruleCheckbox returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='checkbox'
		{
			newLeafNode(otherlv_0, grammarAccess.getCheckboxAccess().getCheckboxKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCheckboxAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCheckboxRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCheckboxAccess().getSizeSizeParserRuleCall_2_0());
				}
				lv_size_2_0=ruleSize
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheckboxRule());
					}
					set(
						$current,
						"size",
						lv_size_2_0,
						"org.xtext.example.mydsl.MyDsl.Size");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCheckboxAccess().getChoiceCheckboxChoiceParserRuleCall_3_0());
				}
				lv_choice_3_0=ruleCheckboxChoice
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheckboxRule());
					}
					set(
						$current,
						"choice",
						lv_choice_3_0,
						"org.xtext.example.mydsl.MyDsl.CheckboxChoice");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
